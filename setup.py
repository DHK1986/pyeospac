#!/usr/bin/python
# -*- coding: utf-8 -*-

from setuptools import setup, Extension, find_packages
import numpy
import os.path
from Cython.Distutils import build_ext
import re
from datetime import datetime
from ConfigParser import ConfigParser

cfg_obj = ConfigParser()
cfg_obj.read('eospac6.cfg')
cfg = dict(cfg_obj.items('DEFAULT'))

EOSPAC_INCLUDE = os.path.join(cfg['eospac_path'], "include", cfg['arch'], cfg['compiler'])
EOSPAC_LIB = os.path.join(cfg['eospac_path'], "lib", cfg['arch'], cfg['compiler'])

for test_path in [cfg['eospac_path'], EOSPAC_INCLUDE, EOSPAC_LIB]:
    if not os.path.exists(test_path):
        raise OSError("Path does not exist: '{0}'. Please edit eospac6.cfg !".format(test_path))



#===============================================================================#
#               Creating constants.py from C headers eos_Interface.h
#===============================================================================#

with open(os.path.join(EOSPAC_INCLUDE, "eos_Interface.h"), 'r') as f:
    header = f.readlines()

sections = {'tables':
                { 'expr': r'/\* table types: \*/',
                  'begin': 0, 
                  'previous': None},
            'options': 
                { 'expr': r'/\* Table setup and interpolation option constants \*/',
                  'previous': 'tables'},
            'info':
                { 'expr': r'/\* Data information constants \*/',
                  'previous': 'options'},
            'errors':
                { 'expr': r'/\* Error code constants \*/',
                  'previous': 'info',
                  'end': -1}
            }

for idx, line in enumerate(header):
    for section_name, section_dict in sections.iteritems():
        if re.match(section_dict['expr'], line):
            section_dict['begin'] = idx+1
            if section_dict['previous']:
                sections[section_dict['previous']]['end'] = idx-1

with open('eospac/constants.py', 'w') as f:
    f.write("""#!/usr/bin/python      
# -*- coding: utf-8 -*-

# Warning! This file is automatically generated from the eos_Interface.h
# header by the setup.py script. All manual changes will be overwritten
# at the next install.
# Created on: {0}\n\n""".format(datetime.now()))
    for section_name, section_dict in sections.iteritems():
        f.write('{0}  = dict(\n'.format(section_name))
        out_txt = []
        for line in header[section_dict['begin']:section_dict['end']]:
            if re.match('^static const EOS_INTEGER EOS.*', line):
                txt = re.sub('^static const EOS_INTEGER EOS_', ' '*4, line)
                txt = re.sub('/\*', '#', txt)
                txt = re.sub('\*/', '', txt)
                txt = re.sub(';', ',', txt)
                if section_name == 'options':
                    # convert options section keys to lowercase
                    comma_idx = txt.find(',')
                    txt = txt[:comma_idx].lower() + txt[comma_idx:]
                out_txt.append(txt)
        f.write(''.join(out_txt))
        f.write(')\n\n')



#===============================================================================#



setup(
    name="eospac",
    version='0.1',
    author='Roman Yurchak (LULI)',
    author_email='rth@crans.org',
    packages=find_packages(),
    cmdclass={'build_ext': build_ext},
    ext_modules=[
                 Extension("eospac.libpyeospac",
                 sources=["eospac/libpyeospac.pyx"],
                 include_dirs=[numpy.get_include(), EOSPAC_INCLUDE],
                 library_dirs=[EOSPAC_LIB],
                 libraries=['eospac6'])
                 ],
    tests_require=['nose']
)


